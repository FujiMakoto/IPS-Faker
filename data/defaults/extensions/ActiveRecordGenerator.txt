<?php
/**
 * @brief		Faker ActiveRecord Generator : {class}
 * @author		<a href='https://www.Makoto.io'>Makoto Fujimoto</a>
 * @copyright	(c) 2015 www.Makoto.io
 * @license		<a href='http://opensource.org/licenses/MIT'>MIT License</a>
 * @package		Fake Content Generator
{subpackage}
 * @since		{date}
 * @version		0.2.0
 */

namespace IPS\{app}\extensions\faker\ActiveRecordGenerator;

/* To prevent PHP errors (extending class does not exist) revealing path */
if ( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
	header( ( isset( $_SERVER['SERVER_PROTOCOL'] ) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.0' ) . ' 403 Forbidden' );
	exit;
}

/**
 * Faker ActiveRecord Generator Extension: {class}
 */
class _{class} extends \IPS\faker\Content\ActiveRecord
{
	/**
	 * @brief   Application name
	 */
	public static $app = '{app}';

	/**
	 * @brief   AdminCP tab restriction
	 */
	public static $acpRestriction = 'faker_generate';

	/**
	 * @brief	Active Record class
	 */
	public static $activeRecordClass = '\IPS\{app}\ActiveRecord';

	/**
	 * @brief   Generator form title language string
	 */
	public static $title = '{app}_faker_activerecords_title';

	/**
	 * @brief   Generator progress message language string
	 */
	public static $message = '{app}_faker_activerecords_generator_message';

	/**
	 * Generate a fake ActiveRecord entry
	 *
	 * @param   array   $values Generator form values
	 * @return  string  Progress message
	 */
	public function generateSingle( array $values )
	{
		$activeRecordClass = static::$activeRecordClass;

		/* Generate the author */
		if ( $values['author'] )
		{
			$member = $values['author'];
		}
		elseif ( $values['author_type'] == 'random_fake' )
		{
			$member = $this->generator->fakeMember();
		}
		else
		{
			$member = $this->generator->guest();
		}

		/* Assign the ActiveRecord values */
		$recordValues = array(
			'author'        => $member,
			'ip_address'    => $this->generator->ipAddress()
		);

		/* Create and save the ActiveRecord entry */
		$obj = new $activeRecordClass;
		$obj->processForm( $recordValues );
		$obj->save();

		/* Map the ActiveRecord entry so we can delete it later */
		$this->map( static::$activeRecordClass, $obj->id );

		return \IPS\Member::loggedIn()->language()->addToStack( static::$message );
	}

	/**
	 * Build a generator form for this record
	 *
	 * @param   \IPS\faker\Decorators\Form  $form
	 * @return  void
	 */
	public function buildGenerateForm( &$form )
	{
		$form->add( new \IPS\Helpers\Form\Select( 'author_type', 'random_fake', TRUE, array(
			'options' => array( 'random_fake' => 'random_fake', 'guest' => 'guest' ), 'unlimited' => '-1',
			'unlimitedLang' => "faker_custom_author", 'unlimitedToggles' => array( 'faker_custom_author' )
		) ) );
		$form->add( new \IPS\Helpers\Form\Member( 'author', NULL, FALSE, array(), NULL, NULL, NULL, 'faker_custom_author' ) );
	}
}